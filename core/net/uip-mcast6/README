README file for Contiki's IPv6 multicast core
Author: George Oikonomou - Loughborough University

What does it do
===============
These files, alongside some core modifications, add support for IPv6 multicast
to contiki's uIPv6 engine.

Currently, two modes are supported:
  - 'Stateless Multicast RPL Forwarding' (SMRF)
    RPL in MOP 3 handles group management as per the RPL docs,
    SMRF is a lightweight engine which handles datagram forwarding
  - 'Multicast Forwarding with Trickle' according to the algorithm described
    in the internet draft:
    http://tools.ietf.org/html/draft-ietf-roll-trickle-mcast

More engines can (and hopefully will) be added in the future

Where to Start
==============
The best place in examples/ipv6/mcast6

There is a cooja example demonstrating basic functionality

How to Use
==========
Look in core/net/uip-mcast6/uip-mcast6-engines.h for a list of supported
multicast engines.

To turn on multicast support:
  Add this line in your project- or contiki-conf.h

  #define UIP_MCAST6_CONF_ENGINE xyz

  where xyz is a value from uip-mcast6-engines.h

To disable:
  #define UIP_MCAST6_CONF_ENGINE 0

How to extend
=============
Let's assume you want to write an engine called foo. For macro magic to work
make sure you prefix your functions and stats datatype with the engine name

  - Open uip-mcast6-engines.h and assign a unique integer code to your engine
    #define UIP_MCAST6_ENGINE_FOO        xyz

  - Open uip-mcast6.h and add a section in the #if spree near the top.
    * Specify if you want to put RPL in MOP3:
      UIP_IPV6_MULTICAST_RPL: 1: MOP 3, 0: non-multicast MOP
    * Assign a name by defining UIP_MCAST6_ENGINE_NAME
      UIP_MCAST6_ENGINE_NAME will be used as the prefix for your functions
    * For instance:
      #elif UIP_IPV6_MULTICAST == UIP_MCAST6_ENGINE_FOO
      #define UIP_IPV6_MULTICAST_RPL 1
      #define UIP_MCAST6_ENGINE_NAME foo
  - Optionally, add a configuration check block to stop builds when the
    configuration is not sane.
  - Include your engine's foo.h
  - Implement:
    in foo.c, implement:
    * foo_init()
    * foo_in()
    * foo_out()
    You can also define them as something else in foo.h instead of
    implementing. For an example, see smrf.h: SMRF only implements _in()
  - Stats:
    * To maintain stats, declare this in your foo.h:
      struct foo_stats {
        /* fields */
      };
    * And use it in foo.c:
      struct foo_stats foo_stat;
    The fields in foo_stats can be anything you like, but the datatype must
    be called foo_stats. The variable must be called foo_stat.
  - Build:
    * Edit Makefile.uip-mcast6: append your .c file(s) to CONTIKI_SOURCEFILES
